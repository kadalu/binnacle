#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

require 'kadalu/binnacle'
require 'kadalu/binnacle/version'

EXIT_RESULT_PASS = 0
EXIT_RESULT_FAIL = 1
EXIT_INVALID_ARGS = 2
EXIT_TEST_FILE_NOT_FOUND = 3
EXIT_NO_TESTS = 4
EXIT_FAILED_TO_EXECUTE = 5

# Set STDOUT and STDERR sync=true
$stdout.sync = true
$stderr.sync = true

Options = Struct.new(:verbose, :task_files, :runner, :dry_run, :result_json, :wide)

# rubocop:disable Metrics/AbcSize
# rubocop:disable Metrics/MethodLength
def parsed_args
  args = Options.new('binnacle - Simple Test and Infra automation Framework')
  args.verbose = 0
  args.runner = false
  args.result_json = ''

  opt_parser = OptionParser.new do |opts|
    opts.banner = 'Usage: binnacle [options] <testfile>'

    opts.on('-w', '--wide', 'Do not crop the task line') { args.wide = true }
    opts.on('-v', '--verbose', 'Verbose output') { args.verbose += 1 }
    opts.on('-r', '--runner', 'Run the tasks from a file (Internal use only)') { args.runner = true }
    opts.on('--results-json=FILE', 'Results JSON file') do |json_file|
      args.result_json = json_file
    end

    opts.on('-h', '--help', 'Prints this help') do
      puts opts
      exit
    end

    opts.on('--version', 'Show Version information') do
      puts "Binnacle #{Kadalu::Binnacle::VERSION}"
      exit
    end
  end

  opt_parser.parse!(ARGV)

  if ARGV.empty?
    warn 'Task file is not specified'
    exit EXIT_INVALID_ARGS
  end

  args.task_files = ARGV
  args
end
# rubocop:enable Metrics/AbcSize
# rubocop:enable Metrics/MethodLength

begin
  args = parsed_args
  if args.runner
    # Include all Binnacle keywords in global namespace
    # to make it available/usable in the task files directly.
    include Kadalu::Binnacle::Plugins
    Kadalu::Binnacle.runner(args.task_files[0], args)
  else
    task_files = []
    metrics = {
      files: [],
      duration_seconds: 0,
      passed: 0,
      failed: 0,
      passed_files: 0,
      failed_files: 0
    }

    args.task_files.each do |tfile|
      task_files.concat(Kadalu::Binnacle::Utils.task_files_from_path(tfile))
    end
    puts "Task files #{task_files.join(', ')}" if args.verbose.positive?

    if task_files.empty?
      warn 'No task files provided'
      exit EXIT_NO_TESTS
    end

    task_files.each do |tfile|
      data = Kadalu::Binnacle.start(tfile, args)
      metrics[:files] << data
      metrics[:duration_seconds] += data[:duration_seconds]
      metrics[:passed] += data[:passed]
      metrics[:failed] += data[:failed]
      metrics[:passed_files] += data[:ok] ? 1 : 0
      metrics[:failed_files] += data[:ok] ? 0 : 1
    end

    Kadalu::Binnacle::Messages.list_failed_tasks(metrics)
    Kadalu::Binnacle::Messages.fileset_completed(metrics)

    if args.result_json != ''
      File.open(args.result_json, 'w') do |json_file|
        json_file.write(metrics.to_json)
      end
    end

    exit 1 if (metrics[:failed_files]).positive?
  end
rescue Interrupt
  warn 'Exiting..'
  exit 1
end
